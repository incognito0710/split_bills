<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Expense.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Expense.java" />
              <option name="originalContent" value="import java.util.Map;&#10;&#10;public class Expense {&#10;    String description;&#10;    double amount;&#10;    int paidById; // who paid&#10;    Map&lt;Integer, Double&gt; splitMap; // userId -&gt; how much they owe&#10;&#10;    public Expense(String description, double amount, int paidById, Map&lt;Integer, Double&gt; splitMap) {&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.paidById = paidById;&#10;        this.splitMap = splitMap;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return description + &quot; : ₹&quot; + amount + &quot; (paid by User &quot; + paidById + &quot;)&quot;;&#10;    }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="import java.util.Map;&#10;&#10;public class Expense {&#10;    String description;&#10;    double amount;&#10;    int paidById; // who paid&#10;    Map&lt;Integer, Double&gt; splitMap; // userId -&gt; how much they owe&#10;&#10;    public Expense(String description, double amount, int paidById, Map&lt;Integer, Double&gt; splitMap) {&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.paidById = paidById;&#10;        this.splitMap = splitMap;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return description + &quot; : ₹&quot; + amount + &quot; (paid by User &quot; + paidById + &quot;)&quot;;&#10;    }&#10;&#10;    public int getPaidById() {&#10;        return paidById;&#10;    }&#10;&#10;    public double getAmount() {&#10;        return amount;&#10;    }&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/splitbillgui.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/splitbillgui.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;&#10;public class splitbillgui extends JFrame {&#10;    private final java.util.List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;    private final java.util.List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;&#10;    private final JTextArea outputArea = new JTextArea(12, 40);&#10;    private final JTextField userField = new JTextField(15);&#10;    private final JTextField descField = new JTextField(15);&#10;    private final JTextField amountField = new JTextField(10);&#10;    private final JComboBox&lt;User&gt; paidByBox = new JComboBox&lt;&gt;();&#10;    private final JComboBox&lt;String&gt; splitTypeBox = new JComboBox&lt;&gt;(new String[]{&quot;Equal&quot;, &quot;Custom&quot;});&#10;&#10;    public splitbillgui() {&#10;        setTitle(&quot;Bill Splitter Tool&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setLayout(new BorderLayout());&#10;&#10;        // ----- Top Panel: Add User -----&#10;        JPanel userPanel = new JPanel();&#10;        userPanel.add(new JLabel(&quot;User Name:&quot;));&#10;        userPanel.add(userField);&#10;        JButton addUserBtn = new JButton(&quot;Add User&quot;);&#10;        userPanel.add(addUserBtn);&#10;&#10;        addUserBtn.addActionListener(e -&gt; addUser());&#10;&#10;        // ----- Middle Panel: Add Expense -----&#10;        JPanel expensePanel = new JPanel();&#10;        expensePanel.add(new JLabel(&quot;Description:&quot;));&#10;        expensePanel.add(descField);&#10;        expensePanel.add(new JLabel(&quot;Amount:&quot;));&#10;        expensePanel.add(amountField);&#10;        expensePanel.add(new JLabel(&quot;Paid By:&quot;));&#10;        expensePanel.add(paidByBox);&#10;        expensePanel.add(new JLabel(&quot;Split Type:&quot;));&#10;        expensePanel.add(splitTypeBox);&#10;&#10;        JButton addExpenseBtn = new JButton(&quot;Add Expense&quot;);&#10;        expensePanel.add(addExpenseBtn);&#10;&#10;        addExpenseBtn.addActionListener(e -&gt; addExpense());&#10;&#10;        // ----- Bottom Panel: Show Results -----&#10;        JPanel bottomPanel = new JPanel();&#10;        JButton showBalancesBtn = new JButton(&quot;Show Balances&quot;);&#10;        JButton simplifyBtn = new JButton(&quot;Simplify Debts&quot;);&#10;        bottomPanel.add(showBalancesBtn);&#10;        bottomPanel.add(simplifyBtn);&#10;&#10;        showBalancesBtn.addActionListener(e -&gt; showBalances());&#10;        simplifyBtn.addActionListener(e -&gt; simplifyDebts());&#10;&#10;        // ----- Output Area -----&#10;        outputArea.setEditable(false);&#10;        JScrollPane scrollPane = new JScrollPane(outputArea);&#10;&#10;        // Add Panels to Frame&#10;        add(userPanel, BorderLayout.NORTH);&#10;        add(expensePanel, BorderLayout.CENTER);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;        add(scrollPane, BorderLayout.EAST);&#10;&#10;        pack();&#10;        setVisible(true);&#10;    }&#10;&#10;    // ===== Logic Methods =====&#10;&#10;    private void addUser() {&#10;        String name = userField.getText().trim();&#10;        if (name.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Enter a name!&quot;);&#10;            return;&#10;        }&#10;        User u = new User(users.size() + 1, name);&#10;        users.add(u);&#10;        paidByBox.addItem(u);&#10;        outputArea.append(&quot;Added user: &quot; + u + &quot;\n&quot;);&#10;        userField.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void addExpense() {&#10;        if (users.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Add users first!&quot;);&#10;            return;&#10;        }&#10;&#10;        String desc = descField.getText().trim();&#10;        double amount;&#10;        try {&#10;            amount = Double.parseDouble(amountField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;Enter valid amount!&quot;);&#10;            return;&#10;        }&#10;&#10;        User paidBy = (User) paidByBox.getSelectedItem();&#10;        if (paidBy == null) return;&#10;&#10;        String splitType = (String) splitTypeBox.getSelectedItem();&#10;        Map&lt;Integer, Double&gt; splitMap = new HashMap&lt;&gt;();&#10;&#10;        if (&quot;Equal&quot;.equals(splitType)) {&#10;            double share = amount / users.size();&#10;            for (User u : users) {&#10;                splitMap.put(u.id, share);&#10;            }&#10;        } else {&#10;            double total = 0;&#10;            for (User u : users) {&#10;                String input = JOptionPane.showInputDialog(this, &quot;Enter share for &quot; + u.name + &quot;:&quot;);&#10;                if (input == null) return;&#10;                double share = Double.parseDouble(input);&#10;                splitMap.put(u.id, share);&#10;                total += share;&#10;            }&#10;            if (Math.abs(total - amount) &gt; 0.01) {&#10;                JOptionPane.showMessageDialog(this, &quot;Shares do not match total amount!&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        Expense exp = new Expense(desc, amount, paidBy.id, splitMap);&#10;        expenses.add(exp);&#10;&#10;        outputArea.append(&quot;Added expense: &quot; + exp + &quot;\n&quot;);&#10;        descField.setText(&quot;&quot;);&#10;        amountField.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void showBalances() {&#10;        Map&lt;Integer, Double&gt; balance = calculateBalances();&#10;&#10;        outputArea.append(&quot;\nBalances:\n&quot;);&#10;        for (User u : users) {&#10;            double amt = balance.get(u.id);&#10;            if (amt &gt; 0) {&#10;                outputArea.append(u.name + &quot; should receive ₹&quot; + String.format(&quot;%.2f&quot;, amt) + &quot;\n&quot;);&#10;            } else if (amt &lt; 0) {&#10;                outputArea.append(u.name + &quot; should pay ₹&quot; + String.format(&quot;%.2f&quot;, -amt) + &quot;\n&quot;);&#10;            } else {&#10;                outputArea.append(u.name + &quot; is settled.\n&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void simplifyDebts() {&#10;        Map&lt;Integer, Double&gt; balance = calculateBalances();&#10;&#10;        java.util.List&lt;UserBalance&gt; payers = new ArrayList&lt;&gt;();&#10;        java.util.List&lt;UserBalance&gt; receivers = new ArrayList&lt;&gt;();&#10;&#10;        for (User u : users) {&#10;            double amt = balance.get(u.id);&#10;            if (amt &lt; 0) {&#10;                payers.add(new UserBalance(u, -amt));&#10;            } else if (amt &gt; 0) {&#10;                receivers.add(new UserBalance(u, amt));&#10;            }&#10;        }&#10;&#10;        int i = 0, j = 0;&#10;        outputArea.append(&quot;\nSimplified Settlements:\n&quot;);&#10;        while (i &lt; payers.size() &amp;&amp; j &lt; receivers.size()) {&#10;            UserBalance payer = payers.get(i);&#10;            UserBalance receiver = receivers.get(j);&#10;&#10;            double settleAmount = Math.min(payer.amount, receiver.amount);&#10;            outputArea.append(payer.user.name + &quot; pays &quot; + receiver.user.name + &quot; ₹&quot; + String.format(&quot;%.2f&quot;, settleAmount) + &quot;\n&quot;);&#10;&#10;            payer.amount -= settleAmount;&#10;            receiver.amount -= settleAmount;&#10;&#10;            if (payer.amount == 0) i++;&#10;            if (receiver.amount == 0) j++;&#10;        }&#10;    }&#10;&#10;    private Map&lt;Integer, Double&gt; calculateBalances() {&#10;        Map&lt;Integer, Double&gt; balance = new HashMap&lt;&gt;();&#10;        for (User u : users) {&#10;            balance.put(u.id, 0.0);&#10;        }&#10;&#10;        for (Expense e : expenses) {&#10;            balance.put(e.paidById, balance.get(e.paidById) + e.amount);&#10;            for (Map.Entry&lt;Integer, Double&gt; entry : e.splitMap.entrySet()) {&#10;                balance.put(entry.getKey(), balance.get(entry.getKey()) - entry.getValue());&#10;            }&#10;        }&#10;        return balance;&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(splitbillgui::new);&#10;    }&#10;}&#10;&#10;// ===== Helper Classes =====&#10;&#10;class User {&#10;    int id;&#10;    String name;&#10;&#10;    User(int id, String name) {&#10;        this.id = id;&#10;        this.name = name;&#10;    }&#10;&#10;    public String toString() {&#10;        return id + &quot; - &quot; + name;&#10;    }&#10;}&#10;&#10;class Expense {&#10;    String description;&#10;    double amount;&#10;    int paidById;&#10;    Map&lt;Integer, Double&gt; splitMap;&#10;&#10;    Expense(String description, double amount, int paidById, Map&lt;Integer, Double&gt; splitMap) {&#10;        this.description = description;&#10;        this.amount = amount;&#10;        this.paidById = paidById;&#10;        this.splitMap = splitMap;&#10;    }&#10;&#10;    public String toString() {&#10;        return description + &quot; : ₹&quot; + amount + &quot; (paid by User &quot; + paidById + &quot;)&quot;;&#10;    }&#10;}&#10;&#10;class UserBalance {&#10;    User user;&#10;    double amount;&#10;&#10;    UserBalance(User user, double amount) {&#10;        this.user = user;&#10;        this.amount = amount;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;&#10;public class splitbillgui extends JFrame {&#10;    private final java.util.List&lt;User&gt; users = new ArrayList&lt;&gt;();&#10;    private final java.util.List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;&#10;    private final JTextArea outputArea = new JTextArea(12, 40);&#10;    private final JTextField userField = new JTextField(15);&#10;    private final JTextField descField = new JTextField(15);&#10;    private final JTextField amountField = new JTextField(10);&#10;    private final JComboBox&lt;User&gt; paidByBox = new JComboBox&lt;&gt;();&#10;    private final JComboBox&lt;String&gt; splitTypeBox = new JComboBox&lt;&gt;(new String[]{&quot;Equal&quot;, &quot;Custom&quot;});&#10;&#10;    public splitbillgui() {&#10;        setTitle(&quot;Bill Splitter Tool&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setLayout(new BorderLayout());&#10;&#10;        // ----- Top Panel: Add User -----&#10;        JPanel userPanel = new JPanel();&#10;        userPanel.add(new JLabel(&quot;User Name:&quot;));&#10;        userPanel.add(userField);&#10;        JButton addUserBtn = new JButton(&quot;Add User&quot;);&#10;        userPanel.add(addUserBtn);&#10;&#10;        addUserBtn.addActionListener(e -&gt; addUser());&#10;&#10;        // ----- Middle Panel: Add Expense -----&#10;        JPanel expensePanel = new JPanel();&#10;        expensePanel.add(new JLabel(&quot;Description:&quot;));&#10;        expensePanel.add(descField);&#10;        expensePanel.add(new JLabel(&quot;Amount:&quot;));&#10;        expensePanel.add(amountField);&#10;        expensePanel.add(new JLabel(&quot;Paid By:&quot;));&#10;        expensePanel.add(paidByBox);&#10;        expensePanel.add(new JLabel(&quot;Split Type:&quot;));&#10;        expensePanel.add(splitTypeBox);&#10;&#10;        JButton addExpenseBtn = new JButton(&quot;Add Expense&quot;);&#10;        expensePanel.add(addExpenseBtn);&#10;&#10;        addExpenseBtn.addActionListener(e -&gt; addExpense());&#10;&#10;        // ----- Bottom Panel: Show Results -----&#10;        JPanel bottomPanel = new JPanel();&#10;        JButton showBalancesBtn = new JButton(&quot;Show Balances&quot;);&#10;        JButton simplifyBtn = new JButton(&quot;Simplify Debts&quot;);&#10;        bottomPanel.add(showBalancesBtn);&#10;        bottomPanel.add(simplifyBtn);&#10;&#10;        showBalancesBtn.addActionListener(e -&gt; showBalances());&#10;        simplifyBtn.addActionListener(e -&gt; simplifyDebts());&#10;&#10;        // ----- Output Area -----&#10;        outputArea.setEditable(false);&#10;        JScrollPane scrollPane = new JScrollPane(outputArea);&#10;&#10;        // Add Panels to Frame&#10;        add(userPanel, BorderLayout.NORTH);&#10;        add(expensePanel, BorderLayout.CENTER);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;        add(scrollPane, BorderLayout.EAST);&#10;&#10;        pack();&#10;        setVisible(true);&#10;    }&#10;&#10;    // ===== Logic Methods =====&#10;&#10;    private void addUser() {&#10;        String name = userField.getText().trim();&#10;        if (name.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Enter a name!&quot;);&#10;            return;&#10;        }&#10;        User u = new User(users.size() + 1, name);&#10;        users.add(u);&#10;        paidByBox.addItem(u);&#10;        outputArea.append(&quot;Added user: &quot; + u + &quot;\n&quot;);&#10;        userField.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void addExpense() {&#10;        if (users.isEmpty()) {&#10;            JOptionPane.showMessageDialog(this, &quot;Add users first!&quot;);&#10;            return;&#10;        }&#10;&#10;        String desc = descField.getText().trim();&#10;        double amount;&#10;        try {&#10;            amount = Double.parseDouble(amountField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;Enter valid amount!&quot;);&#10;            return;&#10;        }&#10;&#10;        User paidBy = (User) paidByBox.getSelectedItem();&#10;        if (paidBy == null) return;&#10;&#10;        String splitType = (String) splitTypeBox.getSelectedItem();&#10;        Map&lt;Integer, Double&gt; splitMap = new HashMap&lt;&gt;();&#10;&#10;        if (&quot;Equal&quot;.equals(splitType)) {&#10;            double share = amount / users.size();&#10;            for (User u : users) {&#10;                splitMap.put(u.id, share);&#10;            }&#10;        } else {&#10;            double total = 0;&#10;            for (User u : users) {&#10;                String input = JOptionPane.showInputDialog(this, &quot;Enter share for &quot; + u.name + &quot;:&quot;);&#10;                if (input == null) return;&#10;                double share = Double.parseDouble(input);&#10;                splitMap.put(u.id, share);&#10;                total += share;&#10;            }&#10;            if (Math.abs(total - amount) &gt; 0.01) {&#10;                JOptionPane.showMessageDialog(this, &quot;Shares do not match total amount!&quot;);&#10;                return;&#10;            }&#10;        }&#10;&#10;        Expense exp = new Expense(desc, amount, paidBy.id, splitMap);&#10;        expenses.add(exp);&#10;&#10;        outputArea.append(&quot;Added expense: &quot; + exp + &quot;\n&quot;);&#10;        descField.setText(&quot;&quot;);&#10;        amountField.setText(&quot;&quot;);&#10;    }&#10;&#10;    private void showBalances() {&#10;        Map&lt;Integer, Double&gt; balance = calculateBalances();&#10;&#10;        outputArea.append(&quot;\nBalances:\n&quot;);&#10;        for (User u : users) {&#10;            double amt = balance.get(u.id);&#10;            if (amt &gt; 0) {&#10;                outputArea.append(u.name + &quot; should receive ₹&quot; + String.format(&quot;%.2f&quot;, amt) + &quot;\n&quot;);&#10;            } else if (amt &lt; 0) {&#10;                outputArea.append(u.name + &quot; should pay ₹&quot; + String.format(&quot;%.2f&quot;, -amt) + &quot;\n&quot;);&#10;            } else {&#10;                outputArea.append(u.name + &quot; is settled.\n&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void simplifyDebts() {&#10;        Map&lt;Integer, Double&gt; balance = calculateBalances();&#10;&#10;        java.util.List&lt;UserBalance&gt; payers = new ArrayList&lt;&gt;();&#10;        java.util.List&lt;UserBalance&gt; receivers = new ArrayList&lt;&gt;();&#10;&#10;        for (User u : users) {&#10;            double amt = balance.get(u.id);&#10;            if (amt &lt; 0) {&#10;                payers.add(new UserBalance(u, -amt));&#10;            } else if (amt &gt; 0) {&#10;                receivers.add(new UserBalance(u, amt));&#10;            }&#10;        }&#10;&#10;        int i = 0, j = 0;&#10;        outputArea.append(&quot;\nSimplified Settlements:\n&quot;);&#10;        while (i &lt; payers.size() &amp;&amp; j &lt; receivers.size()) {&#10;            UserBalance payer = payers.get(i);&#10;            UserBalance receiver = receivers.get(j);&#10;&#10;            double settleAmount = Math.min(payer.amount, receiver.amount);&#10;            outputArea.append(payer.user.name + &quot; pays &quot; + receiver.user.name + &quot; ₹&quot; + String.format(&quot;%.2f&quot;, settleAmount) + &quot;\n&quot;);&#10;&#10;            payer.amount -= settleAmount;&#10;            receiver.amount -= settleAmount;&#10;&#10;            if (payer.amount == 0) i++;&#10;            if (receiver.amount == 0) j++;&#10;        }&#10;    }&#10;&#10;    private Map&lt;Integer, Double&gt; calculateBalances() {&#10;        Map&lt;Integer, Double&gt; balance = new HashMap&lt;&gt;();&#10;        for (User u : users) {&#10;            balance.put(u.id, 0.0);&#10;        }&#10;&#10;        for (Expense e : expenses) {&#10;            balance.put(e.paidById, balance.get(e.paidById) + e.amount);&#10;            for (Map.Entry&lt;Integer, Double&gt; entry : e.splitMap.entrySet()) {&#10;                balance.put(entry.getKey(), balance.get(entry.getKey()) - entry.getValue());&#10;            }&#10;        }&#10;        return balance;&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(splitbillgui::new);&#10;    }&#10;}&#10;&#10;// ===== Helper Classes =====&#10;// Duplicate class definitions removed. Use the definitions from splitbillsApp.java instead." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/splitbillsApp.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/splitbillsApp.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;// JFreeChart imports&#10;import org.jfree.chart.ChartFactory;&#10;import org.jfree.chart.ChartPanel;&#10;import org.jfree.data.general.DefaultPieDataset;&#10;&#10;public class splitbillsApp extends JFrame {&#10;&#10;    // ---- Fields ----&#10;    private JTextField userField, descField, amountField;&#10;    private JComboBox&lt;user&gt; paidByBox;&#10;    private JComboBox&lt;String&gt; splitTypeBox;&#10;    private JTable balanceTable;&#10;    private DefaultTableModel balanceModel;&#10;&#10;    private List&lt;user&gt; users = new ArrayList&lt;&gt;();&#10;    private List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;&#10;    private boolean darkMode = false;&#10;&#10;    public splitbillsApp() {&#10;        setTitle(&quot; SplitBills - Smart Expense Sharing&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(900, 550);&#10;        setLocationRelativeTo(null);&#10;&#10;        // App Icon&#10;        try {&#10;            setIconImage(new ImageIcon(getClass().getResource(&quot;/resources/app.png&quot;)).getImage());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;⚠ App icon missing.&quot;);&#10;        }&#10;&#10;        // Tabs&#10;        JTabbedPane tabs = new JTabbedPane();&#10;        tabs.setFont(new Font(&quot;Segoe UI&quot;, Font.BOLD, 14));&#10;&#10;        tabs.add(&quot; Users&quot;, createUserPanel());&#10;        tabs.add(&quot; Expenses&quot;, createExpensePanel());&#10;        tabs.add(&quot; Balances&quot;, createBalancePanel());&#10;        tabs.add(&quot; Dashboard&quot;, createDashboardPanel());&#10;&#10;        add(tabs, BorderLayout.CENTER);&#10;&#10;        // Dark Mode Toggle&#10;        JCheckBox darkModeToggle = new JCheckBox(&quot; Dark Mode&quot;);&#10;        darkModeToggle.addActionListener(e -&gt; toggleDarkMode(darkModeToggle.isSelected()));&#10;        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));&#10;        bottomPanel.add(darkModeToggle);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        setVisible(true);&#10;    }&#10;&#10;    // ==================== USERS PANEL ====================&#10;    private JPanel createUserPanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(10, 10, 10, 10);&#10;&#10;        JLabel label = new JLabel(&quot;Enter User Name:&quot;);&#10;        label.setFont(new Font(&quot;Segoe UI&quot;, Font.PLAIN, 14));&#10;&#10;        userField = new JTextField(15);&#10;        JButton addUserBtn =UIutils.createStyledButton(&quot;Add User&quot;, new Color(50, 150, 90), &quot;/resources/user.png&quot;);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0; panel.add(label, gbc);&#10;        gbc.gridx = 1; panel.add(userField, gbc);&#10;        gbc.gridx = 2; panel.add(addUserBtn, gbc);&#10;&#10;        addUserBtn.addActionListener(e -&gt; addUser());&#10;&#10;        return panel;&#10;    }&#10;&#10;    // ==================== EXPENSE PANEL ====================&#10;    private JPanel createExpensePanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(8, 8, 8, 8);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        JLabel descLabel = new JLabel(&quot;Description:&quot;);&#10;        JLabel amtLabel = new JLabel(&quot;Amount:&quot;);&#10;        JLabel paidLabel = new JLabel(&quot;Paid By:&quot;);&#10;        JLabel splitLabel = new JLabel(&quot;Split Type:&quot;);&#10;&#10;        descField = new JTextField(15);&#10;        amountField = new JTextField(10);&#10;        paidByBox = new JComboBox&lt;&gt;();&#10;        splitTypeBox = new JComboBox&lt;&gt;(new String[]{&quot;Equal&quot;, &quot;Custom&quot;});&#10;&#10;        JButton addExpenseBtn = UIutils.createStyledButton(&quot;Add Expense&quot;, new Color(60, 120, 200), &quot;/resources/expense.png&quot;);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0; panel.add(descLabel, gbc);&#10;        gbc.gridx = 1; panel.add(descField, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1; panel.add(amtLabel, gbc);&#10;        gbc.gridx = 1; panel.add(amountField, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 2; panel.add(paidLabel, gbc);&#10;        gbc.gridx = 1; panel.add(paidByBox, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 3; panel.add(splitLabel, gbc);&#10;        gbc.gridx = 1; panel.add(splitTypeBox, gbc);&#10;&#10;        gbc.gridx = 1; gbc.gridy = 4; panel.add(addExpenseBtn, gbc);&#10;&#10;        addExpenseBtn.addActionListener(e -&gt; addExpense());&#10;&#10;        return panel;&#10;    }&#10;&#10;    // ==================== BALANCE PANEL ====================&#10;    private JPanel createBalancePanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;&#10;        balanceModel = new DefaultTableModel(new String[]{&quot;User&quot;, &quot;Balance&quot;}, 0);&#10;        balanceTable = new JTable(balanceModel);&#10;        JScrollPane scrollPane = new JScrollPane(balanceTable);&#10;        panel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));&#10;        JButton showBtn = UIutils.createStyledButton(&quot;Show Balances&quot;, new Color(70, 130, 180), &quot;/resources/balance.png&quot;);&#10;        JButton simplifyBtn = UIutils.createStyledButton(&quot;Simplify Debts&quot;, new Color(200, 90, 70), null);&#10;&#10;        btnPanel.add(showBtn);&#10;        btnPanel.add(simplifyBtn);&#10;&#10;        panel.add(btnPanel, BorderLayout.SOUTH);&#10;&#10;        showBtn.addActionListener(e -&gt; showBalances());&#10;        simplifyBtn.addActionListener(e -&gt; simplifyDebts());&#10;&#10;        return panel;&#10;    }&#10;&#10;    // ==================== DASHBOARD PANEL ====================&#10;    private JPanel dashboardPanel;&#10;    private JLabel totalUsersLbl, totalExpLbl;&#10;    private DefaultPieDataset pieDataset;&#10;&#10;    private JPanel createDashboardPanel() {&#10;        dashboardPanel = new JPanel(new BorderLayout());&#10;        dashboardPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));&#10;&#10;        // Top summary&#10;        JPanel summaryPanel = new JPanel(new GridLayout(1, 2, 20, 20));&#10;        totalUsersLbl = new JLabel(&quot; Total Users: &quot; + users.size(), SwingConstants.CENTER);&#10;        totalUsersLbl.setFont(new Font(&quot;Segoe UI&quot;, Font.BOLD, 16));&#10;&#10;        totalExpLbl = new JLabel(&quot; Total Expenses: ₹&quot; + getTotalExpenses(), SwingConstants.CENTER);&#10;        totalExpLbl.setFont(new Font(&quot;Segoe UI&quot;, Font.BOLD, 16));&#10;&#10;        summaryPanel.add(totalUsersLbl);&#10;        summaryPanel.add(totalExpLbl);&#10;        dashboardPanel.add(summaryPanel, BorderLayout.NORTH);&#10;&#10;        // Pie Chart&#10;        pieDataset = new DefaultPieDataset();&#10;        var chart = org.jfree.chart.ChartFactory.createPieChart(&#10;                &quot;Who Spent the Most?&quot;,&#10;                pieDataset,&#10;                true, true, false&#10;        );&#10;&#10;        ChartPanel chartPanel = new ChartPanel(chart);&#10;        dashboardPanel.add(chartPanel, BorderLayout.CENTER);&#10;&#10;        return dashboardPanel;&#10;    }&#10;&#10;    // Call this whenever expenses/users change&#10;    private void updateDashboard() {&#10;        totalUsersLbl.setText(&quot; Total Users: &quot; + users.size());&#10;        totalExpLbl.setText(&quot; Total Expenses: ₹&quot; + getTotalExpenses());&#10;&#10;        pieDataset.clear();&#10;        for (user u : users) {&#10;            double total = expenses.stream()&#10;                    .filter(e -&gt; e.getPaidById() == u.getId())&#10;                    .mapToDouble(Expense::getAmount)&#10;                    .sum();&#10;            if (total &gt; 0) pieDataset.setValue(u.getName(), total);&#10;        }&#10;    }&#10;&#10;&#10;&#10;    // ==================== ACTIONS ====================&#10;    private void addUser() {&#10;        String name = userField.getText().trim();&#10;        if (!name.isEmpty()) {&#10;            user newUser = new user(users.size() + 1, name);&#10;            users.add(newUser);&#10;            paidByBox.addItem(newUser);&#10;            JOptionPane.showMessageDialog(this, &quot;User added: &quot; + name);&#10;            userField.setText(&quot;&quot;);&#10;        }&#10;    }&#10;&#10;    private void addExpense() {&#10;        String desc = descField.getText().trim();&#10;        String amtText = amountField.getText().trim();&#10;        user paidByUser = (user) paidByBox.getSelectedItem();&#10;&#10;        if (desc.isEmpty() || amtText.isEmpty() || paidByUser == null) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please fill all fields&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            double amt = Double.parseDouble(amtText);&#10;            // For now, splitMap is null or empty (you can implement splitting logic later)&#10;            Expense e = new Expense(desc, amt, paidByUser.getId(), null);&#10;            expenses.add(e);&#10;            JOptionPane.showMessageDialog(this, &quot;Expense added: &quot; + desc + &quot; ₹&quot; + amt);&#10;            descField.setText(&quot;&quot;);&#10;            amountField.setText(&quot;&quot;);&#10;            updateDashboard(); // update pie chart and totals&#10;            showBalances();    // update balances table&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Invalid amount&quot;);&#10;        }&#10;    }&#10;&#10;    private void showBalances() {&#10;            balanceModel.setRowCount(0);&#10;            for (user u : users) {&#10;                double total = expenses.stream()&#10;                        .filter(e -&gt; e.getPaidBy().equals(u))&#10;                        .mapToDouble(Expense::getAmount)&#10;                        .sum();&#10;                balanceModel.addRow(new Object[]{u, &quot;₹&quot; + total});&#10;            }&#10;&#10;&#10;    }&#10;&#10;    private void simplifyDebts() {&#10;        JOptionPane.showMessageDialog(this, &quot;Debts simplified (dummy)&quot;);&#10;    }&#10;&#10;    // ==================== HELPERS ====================&#10;    private void toggleDarkMode(boolean enable) {&#10;        darkMode = enable;&#10;        Color bg = enable ? new Color(45, 45, 45) : new Color(245, 245, 245);&#10;        Color fg = enable ? Color.WHITE : Color.BLACK;&#10;&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            getContentPane().setBackground(bg);&#10;            for (Component c : getContentPane().getComponents()) {&#10;                c.setBackground(bg);&#10;                c.setForeground(fg);&#10;            }&#10;        });&#10;    }&#10;&#10;    private double getTotalExpenses() {&#10;        return expenses.stream().mapToDouble(Expense::getAmount).sum();&#10;    }&#10;&#10;&#10;    // ==================== MAIN ====================&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(splitbillsApp::new);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;// JFreeChart imports&#10;import org.jfree.chart.ChartFactory;&#10;import org.jfree.chart.ChartPanel;&#10;import org.jfree.data.general.DefaultPieDataset;&#10;&#10;public class splitbillsApp extends JFrame {&#10;&#10;    // ---- Fields ----&#10;    private JTextField userField, descField, amountField;&#10;    private JComboBox&lt;user&gt; paidByBox;&#10;    private JComboBox&lt;String&gt; splitTypeBox;&#10;    private JTable balanceTable;&#10;    private DefaultTableModel balanceModel;&#10;&#10;    private List&lt;user&gt; users = new ArrayList&lt;&gt;();&#10;    private List&lt;Expense&gt; expenses = new ArrayList&lt;&gt;();&#10;&#10;    private boolean darkMode = false;&#10;&#10;    public splitbillsApp() {&#10;        setTitle(&quot; SplitBills - Smart Expense Sharing&quot;);&#10;        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        setSize(900, 550);&#10;        setLocationRelativeTo(null);&#10;&#10;        // App Icon&#10;        try {&#10;            setIconImage(new ImageIcon(getClass().getResource(&quot;/resources/app.png&quot;)).getImage());&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;⚠ App icon missing.&quot;);&#10;        }&#10;&#10;        // Tabs&#10;        JTabbedPane tabs = new JTabbedPane();&#10;        tabs.setFont(new Font(&quot;Segoe UI&quot;, Font.BOLD, 14));&#10;&#10;        tabs.add(&quot; Users&quot;, createUserPanel());&#10;        tabs.add(&quot; Expenses&quot;, createExpensePanel());&#10;        tabs.add(&quot; Balances&quot;, createBalancePanel());&#10;        tabs.add(&quot; Dashboard&quot;, createDashboardPanel());&#10;&#10;        add(tabs, BorderLayout.CENTER);&#10;&#10;        // Dark Mode Toggle&#10;        JCheckBox darkModeToggle = new JCheckBox(&quot; Dark Mode&quot;);&#10;        darkModeToggle.addActionListener(e -&gt; toggleDarkMode(darkModeToggle.isSelected()));&#10;        JPanel bottomPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));&#10;        bottomPanel.add(darkModeToggle);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        setVisible(true);&#10;    }&#10;&#10;    // ==================== USERS PANEL ====================&#10;    private JPanel createUserPanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(10, 10, 10, 10);&#10;&#10;        JLabel label = new JLabel(&quot;Enter User Name:&quot;);&#10;        label.setFont(new Font(&quot;Segoe UI&quot;, Font.PLAIN, 14));&#10;&#10;        userField = new JTextField(15);&#10;        JButton addUserBtn =UIutils.createStyledButton(&quot;Add User&quot;, new Color(50, 150, 90), &quot;/resources/user.png&quot;);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0; panel.add(label, gbc);&#10;        gbc.gridx = 1; panel.add(userField, gbc);&#10;        gbc.gridx = 2; panel.add(addUserBtn, gbc);&#10;&#10;        addUserBtn.addActionListener(e -&gt; addUser());&#10;&#10;        return panel;&#10;    }&#10;&#10;    // ==================== EXPENSE PANEL ====================&#10;    private JPanel createExpensePanel() {&#10;        JPanel panel = new JPanel(new GridBagLayout());&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(8, 8, 8, 8);&#10;        gbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        JLabel descLabel = new JLabel(&quot;Description:&quot;);&#10;        JLabel amtLabel = new JLabel(&quot;Amount:&quot;);&#10;        JLabel paidLabel = new JLabel(&quot;Paid By:&quot;);&#10;        JLabel splitLabel = new JLabel(&quot;Split Type:&quot;);&#10;&#10;        descField = new JTextField(15);&#10;        amountField = new JTextField(10);&#10;        paidByBox = new JComboBox&lt;&gt;();&#10;        splitTypeBox = new JComboBox&lt;&gt;(new String[]{&quot;Equal&quot;, &quot;Custom&quot;});&#10;&#10;        JButton addExpenseBtn = UIutils.createStyledButton(&quot;Add Expense&quot;, new Color(60, 120, 200), &quot;/resources/expense.png&quot;);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0; panel.add(descLabel, gbc);&#10;        gbc.gridx = 1; panel.add(descField, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1; panel.add(amtLabel, gbc);&#10;        gbc.gridx = 1; panel.add(amountField, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 2; panel.add(paidLabel, gbc);&#10;        gbc.gridx = 1; panel.add(paidByBox, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 3; panel.add(splitLabel, gbc);&#10;        gbc.gridx = 1; panel.add(splitTypeBox, gbc);&#10;&#10;        gbc.gridx = 1; gbc.gridy = 4; panel.add(addExpenseBtn, gbc);&#10;&#10;        addExpenseBtn.addActionListener(e -&gt; addExpense());&#10;&#10;        return panel;&#10;    }&#10;&#10;    // ==================== BALANCE PANEL ====================&#10;    private JPanel createBalancePanel() {&#10;        JPanel panel = new JPanel(new BorderLayout());&#10;&#10;        balanceModel = new DefaultTableModel(new String[]{&quot;User&quot;, &quot;Balance&quot;}, 0);&#10;        balanceTable = new JTable(balanceModel);&#10;        JScrollPane scrollPane = new JScrollPane(balanceTable);&#10;        panel.add(scrollPane, BorderLayout.CENTER);&#10;&#10;        JPanel btnPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 20, 10));&#10;        JButton showBtn = UIutils.createStyledButton(&quot;Show Balances&quot;, new Color(70, 130, 180), &quot;/resources/balance.png&quot;);&#10;        JButton simplifyBtn = UIutils.createStyledButton(&quot;Simplify Debts&quot;, new Color(200, 90, 70), null);&#10;&#10;        btnPanel.add(showBtn);&#10;        btnPanel.add(simplifyBtn);&#10;&#10;        panel.add(btnPanel, BorderLayout.SOUTH);&#10;&#10;        showBtn.addActionListener(e -&gt; showBalances());&#10;        simplifyBtn.addActionListener(e -&gt; simplifyDebts());&#10;&#10;        return panel;&#10;    }&#10;&#10;    // ==================== DASHBOARD PANEL ====================&#10;    private JPanel dashboardPanel;&#10;    private JLabel totalUsersLbl, totalExpLbl;&#10;    private DefaultPieDataset pieDataset;&#10;&#10;    private JPanel createDashboardPanel() {&#10;        dashboardPanel = new JPanel(new BorderLayout());&#10;        dashboardPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));&#10;&#10;        // Top summary&#10;        JPanel summaryPanel = new JPanel(new GridLayout(1, 2, 20, 20));&#10;        totalUsersLbl = new JLabel(&quot; Total Users: &quot; + users.size(), SwingConstants.CENTER);&#10;        totalUsersLbl.setFont(new Font(&quot;Segoe UI&quot;, Font.BOLD, 16));&#10;&#10;        totalExpLbl = new JLabel(&quot; Total Expenses: ₹&quot; + getTotalExpenses(), SwingConstants.CENTER);&#10;        totalExpLbl.setFont(new Font(&quot;Segoe UI&quot;, Font.BOLD, 16));&#10;&#10;        summaryPanel.add(totalUsersLbl);&#10;        summaryPanel.add(totalExpLbl);&#10;        dashboardPanel.add(summaryPanel, BorderLayout.NORTH);&#10;&#10;        // Pie Chart&#10;        pieDataset = new DefaultPieDataset();&#10;        var chart = org.jfree.chart.ChartFactory.createPieChart(&#10;                &quot;Who Spent the Most?&quot;,&#10;                pieDataset,&#10;                true, true, false&#10;        );&#10;&#10;        ChartPanel chartPanel = new ChartPanel(chart);&#10;        dashboardPanel.add(chartPanel, BorderLayout.CENTER);&#10;&#10;        return dashboardPanel;&#10;    }&#10;&#10;    // Call this whenever expenses/users change&#10;    private void updateDashboard() {&#10;        totalUsersLbl.setText(&quot; Total Users: &quot; + users.size());&#10;        totalExpLbl.setText(&quot; Total Expenses: ₹&quot; + getTotalExpenses());&#10;&#10;        pieDataset.clear();&#10;        for (user u : users) {&#10;            double total = expenses.stream()&#10;                    .filter(e -&gt; e.getPaidById() == u.getId())&#10;                    .mapToDouble(Expense::getAmount)&#10;                    .sum();&#10;            if (total &gt; 0) pieDataset.setValue(u.getName(), total);&#10;        }&#10;    }&#10;&#10;&#10;&#10;    // ==================== ACTIONS ====================&#10;    private void addUser() {&#10;        String name = userField.getText().trim();&#10;        if (!name.isEmpty()) {&#10;            user newUser = new user(users.size() + 1, name);&#10;            users.add(newUser);&#10;            paidByBox.addItem(newUser);&#10;            JOptionPane.showMessageDialog(this, &quot;User added: &quot; + name);&#10;            userField.setText(&quot;&quot;);&#10;        }&#10;    }&#10;&#10;    private void addExpense() {&#10;        String desc = descField.getText().trim();&#10;        String amtText = amountField.getText().trim();&#10;        user paidByUser = (user) paidByBox.getSelectedItem();&#10;&#10;        if (desc.isEmpty() || amtText.isEmpty() || paidByUser == null) {&#10;            JOptionPane.showMessageDialog(this, &quot;Please fill all fields&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            double amt = Double.parseDouble(amtText);&#10;            // For now, splitMap is null or empty (you can implement splitting logic later)&#10;            Expense e = new Expense(desc, amt, paidByUser.getId(), null);&#10;            expenses.add(e);&#10;            JOptionPane.showMessageDialog(this, &quot;Expense added: &quot; + desc + &quot; ₹&quot; + amt);&#10;            descField.setText(&quot;&quot;);&#10;            amountField.setText(&quot;&quot;);&#10;            updateDashboard(); // update pie chart and totals&#10;            showBalances();    // update balances table&#10;        } catch (NumberFormatException ex) {&#10;            JOptionPane.showMessageDialog(this, &quot;Invalid amount&quot;);&#10;        }&#10;    }&#10;&#10;    private void showBalances() {&#10;            balanceModel.setRowCount(0);&#10;            for (user u : users) {&#10;                double total = expenses.stream()&#10;                        .filter(e -&gt; e.getPaidById() == u.getId())&#10;                        .mapToDouble(Expense::getAmount)&#10;                        .sum();&#10;                balanceModel.addRow(new Object[]{u, &quot;₹&quot; + total});&#10;            }&#10;&#10;&#10;    }&#10;&#10;    private void simplifyDebts() {&#10;        JOptionPane.showMessageDialog(this, &quot;Debts simplified (dummy)&quot;);&#10;    }&#10;&#10;    // ==================== HELPERS ====================&#10;    private void toggleDarkMode(boolean enable) {&#10;        darkMode = enable;&#10;        Color bg = enable ? new Color(45, 45, 45) : new Color(245, 245, 245);&#10;        Color fg = enable ? Color.WHITE : Color.BLACK;&#10;&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            getContentPane().setBackground(bg);&#10;            for (Component c : getContentPane().getComponents()) {&#10;                c.setBackground(bg);&#10;                c.setForeground(fg);&#10;            }&#10;        });&#10;    }&#10;&#10;    private double getTotalExpenses() {&#10;        return expenses.stream().mapToDouble(Expense::getAmount).sum();&#10;    }&#10;&#10;&#10;    // ==================== MAIN ====================&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(splitbillsApp::new);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/user.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/user.java" />
              <option name="originalContent" value="public class user {&#10;    int id;&#10;    String name;&#10;&#10;    public user(int id, String name) {&#10;        this.id = id;&#10;        this.name = name;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return name; // so comboBox shows name instead of object ref&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="public class user {&#10;    int id;&#10;    String name;&#10;&#10;    public user(int id, String name) {&#10;        this.id = id;&#10;        this.name = name;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return name; // so comboBox shows name instead of object ref&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>